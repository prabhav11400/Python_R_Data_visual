print(sqrt(y))
print(ceiling(x))
print(ceiling(y))
print(floor(x))
print(floor(y))
z<-c(1.5,5.6,8.6)
print(trunc(z))
print(sin(p))
p<-5
print(sin(p))
print(log(p))
print(log10(p))
a<-"123456789"
substr(a,3,5)
print(tolower(s1))
s1<-"ManisH GehLot"
print(tolower(s1))
print(toupper(s1))
s1
print(grep(pat,s2))
s2<- c('abcd',"bcbd",'abcdbcbd')
pat<- '^abc'
print(grep(pat,s2))
s3<-c('acd','bcd','abcdbcd')
print(grep(pat,s3))
a1
a1<-c(0:1,40)
a1
a1
a1<-c(0:10,40)
a1
su<- sum(a1)
print(su)
a2<-c(0:5)
su<-sum(a2)
print(su)
a1<-c(0:10,23,32,15)
a1
su<- max(a1)
print(su)
print(su)
su<- min(a1)
print(su)
print(exp(p))
# Methods of creating a vector;
#(1)Using C function
a<- c(3,4,5,1,5,7)
a
#(2)Using the colon operator
b<- -1:5
b
#(3)Sequence function[seq()]
sq1<- seq(1,5)
sq1
sq2<- seq(1,5,by=0.5)
print(sq2)
seq3<- seq(1,4,length.out=5)
seq3
seq4<- seq(10,100,length.out=4)
seq4
##Two ways of vectorImplementation=(1)Atomic vector, (2)LIST
#Atomic vectors 4 types
#(1)Numeric Vector
numv<-c(12.3,4.6,6,8,9.0)
numv
class(numv)
#(2)Integer Vector
intv<- c(5,6,1,8,9,7)
intv
class(intv)
intv<- as.integer(intv)
class(intv)
#(3)Character Vector
charv<-c(1,5,7,8)
charv
class(charv)
class(charv)
charv<-as.character(charv)
class(charv)
intv2<-c(5L,6L,7L,2L,1L)
class(intv2)
intv2
charv2<-c('ram',"shyam","23")
class(charv2)
#(4)Logical vector
logv1<- c('TRUE',"FALSE")
logv1
class(logv1)
#(4)Logical vector
logv1<- c(TRUe,FALSE)
#(4)Logical vector
logv1<- c(TRUE,FALSE)
logv1
class(logv1)
logv2<- c(1,2,3,4,0)
logv2<- as.logical(logv2)
logv2
##vector indexing starts from 1 , not 0
sequence<-seq(1,5)
sequence[1]
seq[3]
sequence[3]
sequence[5]
##Changing index
char_vec<-c("ram"=12,"shyam"=32,"mohan"=64)
char_vec
char_vec["shyam"]
a1<- c(1,2,3,4,5,6,7)
a1[c(TRUE,FALSE,FALSE,TRUE,TRUE,FALSE,TRUE)]
## vector operations
a1<- c(1,2,3,4,5,6,7)
a2<- c("ram","shyam","mohan","sohan")
a3<- c(a1,a2)
a3
a4<-c(5,6,7,8,1,2,4)
a1+a4
a1-a4
a1*a4
a1/a4
a2[1]
a2[3]
a2[7]
a2[-1]
a2[-2]
a2[2:4]
a2[c(2,3)]
a2[c(2,3,2)]
##NAMING OF VECTORS
z<-c("ram","mohan","sohan")
z
z
names(z)=c("y1","y2","y3")
z["y1"]
z["ram"]
vec1<-c(8,9,4,7,6)
vec2<-c("ram","shyam","nam")
vec3<- c(TRUE,FALSE)
list<-list(vec1,vec2,vec3)
list1<-list(vec1,vec2,vec3)
list1
list2<- list("ram","sohan",c(1,3,5,7,9),TRUE,FALSE)
list2
##naming of the list
list3<-(c("ram","shyam","ramesh"),c(56,89,78),list("btech","bse","ba"))
##naming of the list
list3<-list(c("ram","shyam","ramesh"),c(56,89,78),list("btech","bse","ba"))
list3
names(list3)<- c("students","marks","courses")
list3
print(list4[3])
print(list3[3])
print(list3[2])
print(list3[1])
print(list3["marks"])
print(list3["courses"])
print(list3$marks)
print(list3$courses)
list5
list5<- list(5:9)
list5
list6<- list(14:18)
list6
res<- list5+list6
#res<- list5+list6; Error in list5 + list6 : non-numeric argument to binary operator
v1<- unlist(list5)
print(list5)
class(list5)
class(v1)
v2<-unlist(list6)
typeof(v2)
res<v+v2
res<-v+v2
res<-v1+v2
res
##to merge lists
mer<- list(list5,list6)
mer
View(store.5)
View(stores)
stores<- read.table(file="/home/prabhav/BarGraphs/district.csv",header=T,sep=",")
stores
View(stores)
stores$RandomSum= stores$active*stores$deceased + stores$confirmed - stores$recovered
View(stores)
View(stores$RandomSum)
print(store$RandomSum)
print(stores$RandomSum)
##Getting maximum and minimum of any column
max1<- max(stores$RandomSum)
print(max1)
min1<- min(stores$RandomSum)
print(min1)
View(stores)
# Fetching the detail of one complete row, providing one one information about the row
details1<- subset(stores,RandomSum==max(RandomSum))
print(details1)
details2<-subset(stores,deceased==0)
print(details2)
details3<- subset(stores,district=="Mumbai")
print(details3)
details3<- subset(stores,district=="mumbai")
print(details3)
details3<- subset(stores,district=="Mumbai")
print(details3)
View(stores)
detail4<- subset(stores,((recovered==0)&&(deceased==3)))
detail4<- subset(stores,((recovered==0)&(deceased==3)))
print(detail4)
detail5<-subset(stores,((recovered>=100)&(deceased<=20)))
print(detail5)
# write csv
write.csv("/home/prabhav/BarGraphs/district.csv")
# write.csv() , nyi csv file pwd me banana
# sabse phle R code ki help se ek dataframe bana ,lo
#fir us dataframe ko write.csv function ki help se ek nyi file me copy kr do
#done
mat<- matrix(sample(200,180,replace=T),ncol=6)
df<- data.frame(mat)
write.csv(df,"example-data.csv")
write.csv(df,"example-data.csv")
ls
print(df)
write.csv(df,"example-data.csv")
install.packages("xlsx")
any(grepl("xlsx",indstalled.packages()))
any(grepl("xlsx",installed.packages()))
install.packages("xlsx2dfs")
library(openxlsx)
library(xlsx2dfs)
install.packages("xlsxjars")
any(grepl("xlsx",installed.packages()))
library("xlsx")
library("RMySQL")
library("DBI")
library("RMySQL")
library("DBI")
library("RMySQL")
#            )
con<- dbConnect(MySQL(),
username="root",
dbName="registration form")
dbListFields(con, "form")
data1<- dbGetQuery(con, "select * from form")
print(data1)
data2<- dbSendQuery((con, "select * from form"))
data2
data3<- fetch(rs, n=4)
data3
data4<- fetch(rs, n= -1)
data4
install.packages("ggplot2")
#(1)
x<- c(12,35,56,75)
labels<- c("INDIA","UK","JAPAN","USA")
pie(x)
#(2)
pie(x,labels)
colors=c("blue","green","red","orange")
pie(x,labels,main="Country Pie Chart",col=colors)
pie(x,labels,main="Country Pie Chart",col=rainbow(length(x)))
pie(x,labels,main="Country Pie Chart",col=colors, clockwise=TRUE)
pie(x,labels,main="Country Pie Chart",col=colors, clockwise=FALSE)
pie(x,labels,main="Country Pie Chart",col=colors, clockwise=TRUE)
#(6)
x<- c("12","35","50","76")
labels<- c("PAKISTAN","SRILANKA","USA","INDIA")
colors=c("blue","green","yellow","red")
legend("topright",c("PAKISTAN","SRILANKA","USA","INDIA"),cex=0.8,fill=colors)
pie(x,labels,main="COUNTRY PIE CHART",col=colors)
x<- c("12","35","50","76")
labels<- c("PAKISTAN","SRILANKA","USA","INDIA")
colors=c("blue","green","yellow","red")
legend("topright",c("PAKISTAN","SRILANKA","USA","INDIA"),cex=0.8,fill=colors)
pie(x,labels,main="COUNTRY PIE CHART",col=colors)
pie(x,labels,main="Country Pie Chart",col=colors, clockwise=TRUE)
install.packages("ggplot2")
#using ggplot2
library(ggplot2)
# plotting th echart using ggplot()& geom_point() functions
ggplot(mtcars, aes(x=drat,y=mpg))+geom_point()
ggplot(mtcars, aes(x=drat,y=mpg))+geom_bar()
ggplot(mtcars, aes(x=drat,y=mpg))+geom_line()
#the aes() function inside the geom_point() function, controls the color of the group.
ggplot(mtccars,aes(x=drat,y=mpg))+geom_point(aes(color=factor(gear)))
#the aes() function inside the geom_point() function, controls the color of the group.
ggplot(mtcars,aes(x=drat,y=mpg))+geom_point(aes(color=factor(gear)))
library(plotrix)
x2<- c(20,65,15,50,45)
lable2<- c("usa","india","china","uk","uae")
pie3D<- (x2)
pie3D(x2)
pie3D(x2, labels=lable2, explode=0.2, main="COUNTRY PIE CHART")
pie3D(x1,labels=lable1,main="Country pie chart",col=rainbow(length(x)))
library(plotrix)
x1<- c(20,65,15,50,45)
lable1<- c("usa","india","china","uk","uae")
pie.percent<- round(100*x1/sum(x1),2)
pie3D(x1,labels=pie.percent,main="Country pie chart",col=rainbow(length(x)))
legend("topright",lable1,cex=0.6,fill=rainbow(length(x)))
library(plotrix)
x1<- c(20,65,15,50,45)
lable1<- c("usa","india","china","uk","uae")
pie.percent<- round(100*x1/sum(x1) %,2)
library(plotrix)
x1<- c(20,65,15,50,45)
lable1<- c("usa","india","china","uk","uae")
pie.percent<- round(100*x1/sum(x1) ,2)
pie3D(x1,labels=pie.percent,main="Country pie chart",col=rainbow(length(x)))
legend("topright",lable1,cex=0.6,fill=rainbow(length(x)))
pie3D(x1,labels=pie.percent,main="Country pie chart",col=rainbow(length(x)),clockwise=TRUE)
library(plotrix)
x2<- c(20,65,15,50,45)
lable2<- c("usa","india","china","uk","uae")
pie3D(x2)
pie3D(x2, labels=lable2, explode=0.2, main="COUNTRY PIE CHART")
x2<- c(20,65,15,50,45)
lable2<- c("usa","india","china","uk","uae")
pie3D(x2)
pie3D(x2, labels=lable2, explode=0.6, main="COUNTRY PIE CHART")
library(plotrix)
x2<- c(20,65,15,50,45)
lable2<- c("usa","india","china","uk","uae")
pie3D(x2)
pie3D(x2, labels=lable2, explode=0.2, main="COUNTRY PIE CHART")
pie3D(x2, labels=lable2, explode=0, main="COUNTRY PIE CHART")
h1<- c(82,46,66,23,41)
barplot(h1)
h2<- c(12,35,54,31,41)
m2<- c("feb","march","apr","may","june")
barplot(h2,names.arg=m2,xlab="Months",ylab="Revenue",col="yellow",main="REVENUE BAR CHART", border="red")
#(3)
months<- c("feb","march","apr","may","june")
regions<- c("east","west","north","south")
values<- matrix(c(21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59),nrow=4, ncol=5, byrow=TRUE)
View(values)
#View(values)
barplot(values, main="Total Revenue direction wise", names.arg=months, xlab="Months",ylab="Revenue",col=c("red","blue","yellow","green"))
View(values)
legend("topright",regions,cex=0.6,fill=c("red","blue","yellow","green"))
#(1)
v<- c(12,24,16,38,21,13,55,17,39,10,60,59,58)
hist(v, xlab="WEIGHT",ylab="FREQUENCY", col="green",border= "red")
hist(v, xlab="WEIGHT",ylab="FREQUENCY", col="green",border= "red" , xlim=c(0,40), ylim=c(0,3), breaks=5)
hist(v, xlab="WEIGHT",ylab="FREQUENCY", col="green",border= "red" , xlim=c(0,80), ylim=c(0,7), breaks=5)
v<- c("a","s",1,TRUE)
class(v)
unlict(v)
unlist(v)
v1 <- unlist(v)
v1
my_list <- list(l1 = c(1, 3, 5, 7),
l2 = c(1, 2, 3),
l3 = c(1, 1, 10, 5, 8, 65, 90))
print(unlist(my_list))
df<-("R is the statistical analysis language")
strsplit(df, split = " ")
df<-("R is the statistical analysis language")
strsplit(df, split = " ")
strsplit(df, split = "_")
df<-"get%better%every%day"
strsplit(df,split = '%')
df<-"all16i5need6is4a9long8vacation"
strsplit(df,split = "[0-9]+")
df<-"You can type q() in Rstudio to quit R"
strsplit(df,split="")
test_mat
test_dates<-c("24-07-2020","25-07-2020","26-07-2020","27-07-2020","28-07-2020")
test_mat<-strsplit(test_dates,split = "-")
test_mat
names <- c("priyank", "abhiraj","pawananjani",
"sudhanshu","devraj")
print( "original data:")
names
print("data after lapply():")
lapply(names, toupper)
#create sample data
sample_matrix <- matrix(C<-(1:10),nrow=3, ncol=10)
print( "sample matrix:")
sample_matrix
# Use apply() function across row to find sum
print("sum across rows:")
apply( sample_matrix, 1, sum)
# use apply() function across column to find mean
print("mean across columns:")
apply( sample_matrix, 2, mean)
sample_data<- data.frame( x=c(1,2,3,4,5,6),
y=c(3,2,4,2,34,5))
print( "original data:")
sample_data
# apply sapply() function
print("data after sapply():")
sapply(sample_data, max)
# Here, is a basic example showcasing the use of the tapply() function on the diamonds dataset which is provided by the tidyverse package library.
install.packages("tidyverse")
# Here, is a basic example showcasing the use of the tapply() function on the diamonds dataset which is provided by the tidyverse package library.
install.packages("tidyverse")
# Here, is a basic example showcasing the use of the tapply() function on the diamonds dataset which is provided by the tidyverse package library.
install.packages("tidyverse")
library(tidyverse)
library(tidyverse)
install.packages("devtools")
install.packages("tidyverse")
library(tidyverse)
library(rlang)
install.packages("tidyverse")
installed.packages("tidyverse")
library(tidyverse)
install.packages("broom", dependencies = TRUE)
install.packages("tidyverse")
install.packages("tidyverse", dependencies = TRUE)
source("~/30 Addon.R")
# Reading .csv file
getwd()
setwd("/home/prabhav/R Learning/")
formate1<-read.csv(file.choose())
stores<- read.table(file="/home/prabhav/BarGraphs/district.csv",header=T,sep=",")
stores
View(stores)
stores$RandomSum= stores$active*stores$deceased + stores$confirmed - stores$recovered
View(stores)
View(stores$RandomSum)
print(stores$RandomSum)
##Getting maximum and minimum of any column
max1<- max(stores$RandomSum)
print(max1)
min1<- min(stores$RandomSum)
print(min1)
# Fetching the detail of one complete row, providing one one information about the row: subset()
details1<- subset(stores,RandomSum==max(RandomSum))
print(details1)
details2<-subset(stores,deceased==0)
print(details2)
details3<- subset(stores,district=="Mumbai")
print(details3)
detail4<- subset(stores,((recovered==0)&(deceased==3)))
print(detail4)
detail5<-subset(stores,((recovered>=100)&(deceased<=20)))
print(detail5)
mat<- matrix(sample(200,180,replace=T),ncol=6) #random matrix generator
df<- data.frame(mat)
print(df)
write.csv(df,"example-data.csv")
formate1<-read.csv(file.choose())
head(formate1)
install.packages("readxl")
library(readxl)
formate2<-read_xlsx(file.choose())
head(formate2)
#txt file
formate3<- read.delim(file.choose())
head(formate3)
# bar plot()
?barplot()
bp1<- read.delim(file.choose())
barplot(bp1$X1)
library(readxl)
bp1<-read_xlsx(file.choose())
bp1<-read.csv(file.choose())
barplot(bp1$X1)
barplot(bp1$X1,ylim=c(0,200))
barplot(bp1$X1,ylim=c(0,200),names=bp1$X)
view(formate3)
View(formate3)
View(formate3)
View(formate1)
barplot(bp1$X1,ylim=c(0,200),names=bp1$X) # X is sample number(1 to 30), X1 consider as expression of different genes
barplot(bp1$X1,ylim=c(0,200),names=bp1$X,xlab="Sample Number",ylab="expression level")
barplot(bp1$X1,ylim=c(0,200),names=bp1$X,xlab="Sample Number",ylab="expression level")
barplot(bp1$X1,ylim=c(0,200),names=bp1$X, xlab="Sample Number", ylab="Expression level", main="GENE EXPRESSION", col=c(2,5))
barplot(bp1$X1,ylim=c(0,200),names=bp1$X, xlab="Sample Number", ylab="Expression level", main="GENE EXPRESSION", col=c(2,5,7))
barplot(bp1$X1,ylim=c(0,200),names=bp1$X,xlab="Expression Value", ylab="Sample Number")
barplot(bp1$X1,ylim=c(0,200),names=bp1$X,xlab="Expression Value", ylab="Sample Number", main"GENE Expression", col=c(2,5,7), horiz=TRUE)
)
barplot(bp1$X1,ylim=c(0,200),names=bp1$X,xlab="Expression Value", ylab="Sample Number", main="GENE Expression", col=c(2,5,7), horiz=TRUE)
# dot chart
dt<- read.csv("/home/prabhav/example-data.csv")
dotchart(dt$X1)
dotchart(dt$X1, labels=dt$X)
dotchart(dt$X1,labels = dt$X, color="red")
dotchart(dt$X1,labels=dt$X,color="red",pch=16)
dotchart(dt$X1,labels=dt$X, color="red", pch=16,cex=2)
dotchart(dt$X1,labels=dt$X, color="red", pch=16,cex=1)
dotchart(dt$X1,labels=dt$X, color="blue",pch=16,cex=1.5,xlab="Sample Anukrank",ylab="Expression lebel", main="Gene expression level")
#pie chart
pt<- read.csv("/home/prabhav/example-data.csv")
piechart(dt$X1)
pie(dt$X1)
#histogram chart
hist(dt$X1,labels=dt$X,xlab="GENE ID",ylab="GENE EXPRESSION","random pie chart")
#histogram chart
hist(dt$X1,labels=dt$X,xlab="GENE ID",ylab="GENE EXPRESSION",main="random pie chart")
#histogram chart
hist(dt$X1,labels=dt$X,xlab="GENE ID",ylab="GENE EXPRESSION",main="random histogram chart")
hist(dt$X1,labels=dt$X,xlab="GENE ID",ylab="GENE EXPRESSION",xlim=c(0,31),main="random histogram chart")
View(dt)
hist(dt$X1,labels=dt$X,xlab="GENE ID",ylab="GENE EXPRESSION",xlim=c(0,300),main="random histogram chart")
View(dt)
hist(dt$X1, xlab="GENE EXPRESSION/ X1 COLUMN KI VALUES", ylab="X1 COLUMN VALUES KI DIFFERENT RANGE ME FREQUENCIES",col="red",border="black")
# clustor (x,y) plot
plot(bp1$X, bp1$X1, xlab="Gene Roll Number", ylab="Gene Expression", main="(x,y) or (gene id, gene expression value graph)")
plot(bp1$X, bp1$X1, xlab="Gene Roll Number", ylab="Gene Expression", main="(x,y) or (gene id, gene expression value graph)",pch=12)
plot(bp1$X, bp1$X1, xlab="Gene Roll Number", ylab="Gene Expression", main="(x,y) or (gene id, gene expression value graph)",pch=16)
plot(bp1$X, bp1$X1, xlab="Gene Roll Number", ylab="Gene Expression", main="(x,y) or (gene id, gene expression value graph)",pch=16, cex=2)
# boxplot()
bp2<-read.csv(file.choose())
boxplot(bp2$X1)
boxplot(bp2$X1, bp2$X2, names=c("X1","X2"),col=c(4,6))
boxplot(bp2$X1)
boxplot(bp2$X1, bp2$X2, bp2$X3)
boxplot(bp2$X1, bp2$X2, bp2$X3, names=c("X1","X2","X3"), col=c(4,6,8))
boxplot(bp2$X1, bp2$X2, bp2$X3, names=c("X1","X2","X3"), col=c(4,6,8), xlab="gene id or gene", ylab="Expression", main="Y pr xolumn ki values and x par column names")
boxplot(bp2$X1, bp2$X2, bp2$X3, names=c("X1","X2","X3"), col=c(4,6,8), xlab="gene id or gene", ylab="Expression", main="Y pr column ki values and x par column names")
